
/* -------------------------------------------------------------------------
 * !!! AUTOMATICALLY GENERATED CODE !!!
 * -------------------------------------------------------------------------
 * This file was automatically generated by the OrangeBits compiler.  
 * Compiled on:  12/9/2012 11:46:12 PM
 * Compiled by: Isaac\Cole
 * Source: C:\Users\Cole\Documents\My Web Sites\TheFoxtrot\foxtrot.coffee      
 * -------------------------------------------------------------------------*/


var $, Foxtail, Game, Grass, InputHandler, Particle, Platform, Player, Spring, Sprite, SpriteImage, World;
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }, __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

$ = Zepto;

window.requestAnimFrame = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(callback, 1000 / 60);
  };
})();

$(function() {
  var game;
  game = new Game;
  return game.run();
});

Game = (function() {

  function Game() {
    this.main = __bind(this.main, this);
    this.animate = __bind(this.animate, this);
  }

  Game.prototype.run = function() {
    this.setup();
    this.reset();
    this.then = Date.now();
    return this.animate();
  };

  Game.prototype.animate = function() {
    if (this.world) {
      if (!this.world.endgame) {
        this.main();
      } else {
        this.world.ctx.fillStyle = "rgb(241, 241, 242)";
        this.world.ctx.font = "Bold 40px Calibri";
        this.world.ctx.fillText("You got all splatted on", 10, 500);
        this.world.ctx.fillText("the Hard Ground little Fox!", 20, 550);
        this.world.ctx.font = "Bold 15px Calibri";
        this.world.ctx.fillText("(refresh?)", 300, 600);
      }
      return requestAnimFrame(this.animate);
    }
  };

  Game.prototype.setup = function() {
    this.world = new World;
    return this.inputHandler = new InputHandler(this.world);
  };

  Game.prototype.update = function(modifier) {
    return this.inputHandler.update(modifier);
  };

  Game.prototype.reset = function() {
    return this.world.reset();
  };

  Game.prototype.main = function() {
    var delta, now;
    now = Date.now();
    delta = now - this.lastUpdate;
    this.lastUpdate = now;
    this.lastElapsed = delta;
    this.update(delta / 100);
    return this.render();
  };

  Game.prototype.render = function() {
    return this.world.render(this.lastUpdate, this.lastElapsed);
  };

  return Game;

})();

World = (function() {
  var worldX, worldY;

  World.prototype.width = 480;

  World.prototype.height = 6000;

  World.prototype.viewWidth = 640;

  World.prototype.viewHeight = 720;

  World.prototype.endgame = false;

  worldX = -80;

  worldY = 5500;

  World.prototype.sprites = [];

  World.prototype.springs = [];

  World.prototype.particles = [];

  World.prototype.renderParticles = false;

  World.prototype.particleColor = "#2af";

  function World() {
    var num;
    this.ctx = this.createCanvas();
    for (num = 100; num >= 10; num--) {
      this.makeplatforms(num);
    }
    this.player = new Player(this);
    this.sprites.push(this.player);
    this.sprites.push(new Grass(this));
  }

  World.prototype.getCX = function(wx) {
    return wx - worldX;
  };

  World.prototype.getCY = function(wy) {
    return wy - worldY;
  };

  World.prototype.makeplatforms = function(num) {
    var plat;
    plat = new Platform(this, 6100 - 2 * num * num, 105 - num / 2);
    if (Math.floor(Math.random() * 18) === 1 && num > 40) {
      this.springs.push(new Spring(plat));
    }
    return this.sprites.push(plat);
  };

  World.prototype.adjustWX = function(dx) {
    return worldX += dx;
  };

  World.prototype.adjustWY = function(dy) {
    return worldY += dy;
  };

  World.prototype.createCanvas = function() {
    var canvas;
    canvas = document.createElement("canvas");
    canvas.width = this.viewWidth;
    canvas.height = this.viewHeight;
    $(".game").append(canvas);
    return canvas.getContext("2d");
  };

  World.prototype.render = function(lastUpdate, lastElapsed) {
    var spring, sprite, _i, _j, _len, _len2, _ref, _ref2;
    this.ctx.fillStyle = "#b6d4e4";
    this.ctx.fillRect(0, 0, this.viewWidth, this.viewHeight);
    if (this.renderParticles) this.particleCreator();
    _ref = this.sprites;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sprite = _ref[_i];
      sprite.draw();
    }
    _ref2 = this.springs;
    for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
      spring = _ref2[_j];
      spring.draw();
    }
    this.player.foxtail.draw();
    this.ctx.fillStyle = "rgba(255, 255, 255, 0.5)";
    this.ctx.fillRect(0, 0, (this.viewWidth - this.width) / 2, this.viewHeight);
    this.ctx.fillRect(this.viewWidth - (this.viewWidth - this.width) / 2, 0, (this.viewWidth - this.width) / 2, this.viewHeight);
    return this.renderDebugOverlay(lastElapsed);
  };

  World.prototype.renderDebugOverlay = function(lastElapsed) {
    this.ctx.save();
    this.ctx.fillStyle = "rgb(241, 241, 242)";
    this.ctx.font = "Bold 20px Monospace";
    this.ctx.fillText("Height " + (Math.round((6000 - this.player.wy) / 60)), 10, 20);
    this.ctx.fillText("" + this.width, 10, 40);
    this.player.update(lastElapsed / 20);
    return this.ctx.restore();
  };

  World.prototype.candie = function() {
    return this.player.candie = true;
  };

  World.prototype.particleCreator = function() {
    var newParticles, p, _i, _len, _ref;
    this.ctx.fillStyle = this.particleColor;
    newParticles = [];
    if (this.player.flying) {
      this.particles.push(new Particle(this, this.player.wx + this.player.sw / 3, this.player.wy + this.player.sh, 8.0));
      this.particles.push(new Particle(this, this.player.wx + this.player.sw * 2 / 3, this.player.wy + this.player.sh, 8.0));
    }
    _ref = this.particles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (!(p.life > 0)) continue;
      newParticles.push(p);
      p.draw();
    }
    if (newParticles.length === 0) {
      return this.suspendParticles();
    } else {
      return this.particles = newParticles;
    }
  };

  World.prototype.createParticles = function(color) {
    this.particleColor = color;
    return this.renderParticles = true;
  };

  World.prototype.suspendParticles = function() {
    this.renderParticles = false;
    return this.particles.length = 0;
  };

  World.prototype.left = function(mod) {
    return this.player.left(mod);
  };

  World.prototype.right = function(mod) {
    return this.player.right(mod);
  };

  World.prototype.reset = function() {
    return this.resetCount++;
  };

  World.prototype.activePlats = function() {
    var sprite, _i, _len, _ref, _results;
    _ref = this.sprites;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sprite = _ref[_i];
      if (sprite.isplat && sprite.isActive) _results.push(sprite);
    }
    return _results;
  };

  World.prototype.activeSprings = function() {
    var spring, _i, _len, _ref, _results;
    _ref = this.springs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      spring = _ref[_i];
      if (spring.plat.isActive) _results.push(spring);
    }
    return _results;
  };

  return World;

})();

InputHandler = (function() {

  InputHandler.prototype.keysDown = {};

  function InputHandler(world) {
    var _this = this;
    this.world = world;
    $("body").keydown(function(e) {
      return _this.keysDown[e.keyCode] = true;
    });
    $("body").keyup(function(e) {
      return delete _this.keysDown[e.keyCode];
    });
  }

  InputHandler.prototype.d = function() {
    delete this.keysDown[68];
    return this.world.debug();
  };

  InputHandler.prototype.update = function(modifier) {
    if (37 in this.keysDown) this.world.left(modifier);
    if (39 in this.keysDown) this.world.right(modifier);
    if (68 in this.keysDown) return this.debug();
  };

  return InputHandler;

})();

SpriteImage = (function() {

  SpriteImage.prototype.ready = false;

  SpriteImage.prototype.url = "img/sheet.png";

  function SpriteImage() {
    var image;
    var _this = this;
    image = new Image;
    image.src = this.url;
    image.onload = function() {
      return _this.ready = true;
    };
    this.image = image;
  }

  return SpriteImage;

})();

Sprite = (function() {

  Sprite.prototype.name = "Plat";

  Sprite.prototype.sx = 0;

  Sprite.prototype.sy = 0;

  Sprite.prototype.sw = 0;

  Sprite.prototype.sh = 0;

  Sprite.prototype.wx = 0;

  Sprite.prototype.wy = 0;

  Sprite.prototype.image = new SpriteImage;

  Sprite.prototype.isplat = false;

  function Sprite(world) {
    this.world = world;
  }

  Sprite.prototype.drawImage = function() {
    if (this.image.ready) {
      return this.world.ctx.drawImage(this.image.image, this.sx, this.sy, this.sw, this.sh, this.world.getCX(this.wx), this.world.getCY(this.wy), this.sw, this.sh);
    }
  };

  return Sprite;

})();

Grass = (function() {

  function Grass(world) {
    this.world = world;
    this.name = "Grass";
    this.isplat = false;
  }

  Grass.prototype.draw = function() {
    this.world.ctx.fillStyle = "#177c00";
    return this.world.ctx.fillRect(0, this.world.getCY(this.world.height), this.world.viewWidth, this.world.viewHeight);
  };

  return Grass;

})();

Platform = (function() {

  __extends(Platform, Sprite);

  function Platform(world, y, w) {
    this.world = world;
    this.isplat = true;
    this.isdrawn = true;
    this.ismoving = y < 5000 && Math.floor(Math.random() * 5) === 1;
    this.sh = 10;
    this.sw = w;
    this.wy = y;
    this.wx = Math.floor(Math.random() * 13) * (this.world.width - this.sw) / 20;
    this.vx = this.ismoving ? 4 : 0;
    this.typeplat = Math.floor(Math.random() * 3);
    this.sx = this.typeplat * 100 + (100 - this.sw) / 2;
    this.sy = this.ismoving ? 80 : 70;
    Platform.__super__.constructor.call(this, this.world);
  }

  Platform.prototype.isActive = function() {
    return this.isdrawn && this.world.getCY(this.wy) > -10;
  };

  Platform.prototype.jumpoff = function() {
    this.typeplat--;
    this.sx = this.typeplat * 100 + (100 - this.sw) / 2;
    if (this.typeplat === -1) {
      this.isdrawn = false;
      return this.isplat = false;
    }
  };

  Platform.prototype.draw = function() {
    if (this.world.getCY(this.wy) > this.world.viewHeight) {
      this.isdrawn = false;
      this.world.candie();
      this.isplat = false;
    }
    if (this.isActive()) {
      this.drawImage();
      if (this.ismoving) {
        if (((this.wx + this.sw + this.vx) > this.world.width && this.vx > 0) || ((this.wx + this.vx) < 0 && this.vx < 0)) {
          this.vx *= -1;
        }
        return this.wx += this.vx;
      }
    }
  };

  return Platform;

})();

Particle = (function() {

  function Particle(world, wx, wy, life) {
    this.world = world;
    this.wx = wx;
    this.wy = wy;
    this.life = life;
    this.wx += -this.life / 2 + 4 - Math.floor(Math.random() * 9);
    this.wy += -this.life / 2 + 4 - Math.floor(Math.random() * 9);
  }

  Particle.prototype.draw = function() {
    this.world.ctx.fillRect(this.world.getCX(this.wx), this.world.getCY(this.wy), this.life, this.life);
    return this.life -= .5;
  };

  return Particle;

})();

Spring = (function() {

  __extends(Spring, Sprite);

  Spring.prototype.springDepressed = true;

  function Spring(plat) {
    this.plat = plat;
    this.sx = 303;
    this.sy = 0;
    this.sw = 21;
    this.sh = 30;
    this.wx = this.plat.wx + this.plat.sw / 2 - this.sw / 2;
    this.wy = this.plat.wy - this.sh;
    Spring.__super__.constructor.call(this, this.plat.world);
  }

  Spring.prototype.jumpoff = function() {
    this.plat.world.createParticles("#fff");
    if (this.springDepressed) return this.springDepressed = false;
  };

  Spring.prototype.draw = function() {
    if (this.plat.isActive()) {
      if (this.plat.ismoving) {
        this.wx = this.plat.wx + this.plat.sw / 2;
        this.wy = this.plat.wy - this.sh;
      }
      this.sx = this.springDepressed ? 303 : 328;
      return this.drawImage();
    } else if (!this.plat.isplat) {
      return this.springDepressed = false;
    }
  };

  return Spring;

})();

Player = (function() {

  __extends(Player, Sprite);

  Player.prototype.gravity = .6;

  Player.prototype.jumpHeight = 20;

  Player.prototype.speed = 5;

  Player.prototype.airRes = .98;

  Player.prototype.frame = 0;

  Player.prototype.jumping = 0;

  Player.prototype.flying = false;

  Player.prototype.vx = 0;

  Player.prototype.vy = 0;

  function Player(world) {
    this.world = world;
    this.sw = 50;
    this.sh = 69;
    this.wx = this.world.width / 2 - this.sw / 2;
    this.wy = 5700;
    this.foxtail = new Foxtail(this.world, this, this.image);
    this.isplat = false;
    this.candie = false;
    this.name = "Player";
    Player.__super__.constructor.call(this, this.world);
  }

  Player.prototype.jump = function() {
    return this.vy = -this.jumpHeight;
  };

  Player.prototype.spring = function() {
    this.vy = -1.5 * this.jumpHeight;
    return this.flying = true;
  };

  Player.prototype.update = function(mod) {
    if (!mod) return;
    this.vy += this.gravity * mod;
    if (this.vy > 0) {
      this.flying = false;
      if (this.platCollision()) this.jump();
    }
    if (this.springCollision()) this.spring();
    if (this.wy > this.world.height - this.sh && this.vy > 0) {
      if (!this.candie) {
        this.jump();
      } else {
        this.world.endgame = true;
      }
    }
    this.wy += this.vy * mod;
    this.wx += this.vx * mod;
    this.vx *= this.airRes;
    if (this.world.getCY(this.wy) > this.world.viewHeight - 100 && this.vy > 0 || this.world.getCY(this.wy) < 300 && this.vy < 0) {
      return this.world.adjustWY(this.vy);
    }
  };

  Player.prototype.draw = function() {
    this.frame = 2;
    if (this.vx > 2) this.frame = 3;
    if (this.vx > 6) this.frame = 4;
    if (this.vx < -2) this.frame = 1;
    if (this.vx < -6) this.frame = 0;
    this.sx = this.sw * this.frame;
    this.sy = this.vy < 0 ? 0 : 91;
    return this.drawImage();
  };

  Player.prototype.cy = function() {
    return this.world.getCY(this.wy);
  };

  Player.prototype.cx = function() {
    return this.world.getCX(this.wx);
  };

  Player.prototype.platCollision = function() {
    var o, _i, _len, _ref;
    _ref = this.world.activePlats();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      o = _ref[_i];
      if ((this.wy + 50) > o.wy - 20 && (this.wy + 50) < o.wy + o.sh && this.wx > o.wx - this.sw && this.wx < o.wx + o.sw) {
        o.jumpoff();
        return true;
      }
    }
  };

  Player.prototype.springCollision = function() {
    var o, _i, _len, _ref;
    _ref = this.world.activeSprings();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      o = _ref[_i];
      if (o.springDepressed) {
        if ((this.wy + 50) > o.wy - 20 && (this.wy + 50) < o.wy + o.sh && this.wx > o.wx - this.sw && this.wx < o.wx + o.sw) {
          o.jumpoff();
          return true;
        }
      }
    }
  };

  Player.prototype.left = function(mod) {
    if (!mod) return;
    this.vx -= this.speed * mod;
    if (this.vx < -8) return this.vx = -8;
  };

  Player.prototype.right = function(mod) {
    if (!mod) return;
    this.vx += this.speed * mod;
    if (this.vx > 8) return this.vx = 8;
  };

  return Player;

})();

Foxtail = (function() {

  Foxtail.prototype.sx = 275 - 11;

  Foxtail.prototype.sy = 8;

  Foxtail.prototype.sw = 22;

  Foxtail.prototype.sh = 60;

  function Foxtail(world, player, image) {
    this.world = world;
    this.player = player;
    this.image = image;
  }

  Foxtail.prototype.draw = function() {
    var angle;
    angle = Math.atan2(this.player.vx, -this.player.vy);
    this.world.ctx.translate(this.player.cx() + this.player.sw / 2, this.player.cy() + this.player.sh / 2 + 16);
    this.world.ctx.rotate(angle);
    this.world.ctx.translate(-11, 0);
    this.world.ctx.drawImage(this.image.image, this.sx, this.sy, this.sw, this.sh, 0, 0, this.sw, this.sh);
    this.world.ctx.translate(11, 0);
    this.world.ctx.rotate(-angle);
    return this.world.ctx.translate(-this.player.cx() - this.player.sw / 2, -this.player.cy() - this.player.sh / 2 - 16);
  };

  return Foxtail;

})();
